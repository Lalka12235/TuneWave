"""Recreate NotificationType enum with all correct values including ROOM_INVITE

Revision ID: 8963470b23f9
Revises: 57f100e1c658
Create Date: 2025-08-23 16:48:00.862916

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision: str = '8963470b23f9'
down_revision: Union[str, None] = '57f100e1c658'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade():
        # ### commands auto generated by Alembic - please adjust! ###

        # 0. Удалить все записи из таблицы notifications.
        # Это необходимо, так как мы полностью пересоздаем ENUM и старые ссылки могут быть недействительны.
        op.execute("DELETE FROM notifications")

        # 1. Переименовать старый ENUM-тип (если он существует).
        # Это освободит имя 'notificationtype' для нового ENUM.
        op.execute("ALTER TYPE notificationtype RENAME TO notificationtype_old")

        # 2. Создать новый ENUM-тип с *полным и правильным* списком значений.
        # Этот список ДОЛЖЕН ТОЧНО СООТВЕТСТВОВАТЬ тем строкам,
        # которые ваш Python-код пытается вставить в БД.
        new_enum_values = (
            'FRIEND_REQUEST',
            'FRIEND_ACCEPTED',
            'ROOM_INVITED',       # Старое значение с 'D' (на случай если оно где-то используется)
            'FRIEND_DECLINED',
            'MESSAGE',
            'FRIENDSHIP_DELETED',
            'SYSTEM_MESSAGE',
            'friend_accepted',
            'friend_declined',
            'friendship_deleted',
            'message',
            'system_message',
            'room_invite',        # Старое значение в нижнем регистре
            'ROOM_INVITE',        # <-- ВОТ ЭТО ЗНАЧЕНИЕ ОТСУТСТВУЕТ и вызывает ошибку!
            'accept',
            'decline',
        )
        notificationtype_new = postgresql.ENUM(
            *new_enum_values,
            name='notificationtype',
            create_type=False
        )
        # Создаем новый ENUM-тип в базе данных
        notificationtype_new.create(op.get_bind())

        # 3. Привести колонку к новому типу ENUM.
        # Поскольку мы удалили все данные, просто меняем тип колонки.
        op.execute("ALTER TABLE notifications ALTER COLUMN notification_type TYPE notificationtype USING notification_type::text::notificationtype")

        # 4. Удалить старый переименованный ENUM-тип.
        op.execute("DROP TYPE notificationtype_old")

        # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Откат для этой операции:
    # 1. Снова удалить все записи, так как значения ENUM изменятся.
    op.execute("DELETE FROM notifications")
    # 2. Переименовать текущий ENUM-тип.
    op.execute("ALTER TYPE notificationtype RENAME TO notificationtype_old")
    # 3. Создать ENUM-тип, как он был ДО этого изменения (или просто более базовый).
    # Этот список ДОЛЖЕН СООТВЕТСТВОВАТЬ состоянию вашего ENUM до применения этой миграции.
    old_enum_values_for_downgrade = (
        'FRIEND_REQUEST',
        'FRIEND_ACCEPTED',
        'ROOM_INVITED',
        'FRIEND_DECLINED',
        'MESSAGE',
        'FRIENDSHIP_DELETED',
        'SYSTEM_MESSAGE',
        'friend_accepted',
        'friend_declined',
        'friendship_deleted',
        'message',
        'system_message',
        'room_invite',
        'accept',
        'decline',
    )
    notificationtype_old_recreate = postgresql.ENUM(
        *old_enum_values_for_downgrade,
        name='notificationtype',
        create_type=False
    )
    notificationtype_old_recreate.create(op.get_bind())
    # 4. Привести колонку обратно к старому типу.
    op.execute("ALTER TABLE notifications ALTER COLUMN notification_type TYPE notificationtype USING notification_type::text::notificationtype")
    # 5. Удалить временно переименованный ENUM-тип.
    op.execute("DROP TYPE notificationtype_old")
    # ### end Alembic commands ###