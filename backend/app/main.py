from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from app.config.loggingMiddleware import LogMiddleware
from app.api.v1.all_route import V1_ROUTERS
from app.logger.log_config import configure_logging
from app.services.scheduler_service import SchedulerService
from contextlib import asynccontextmanager
from fastapi_limiter import FastAPILimiter
import redis.asyncio as redis
from app.config.settings import settings
import os
from uvicorn.middleware.proxy_headers import ProxyHeadersMiddleware

configure_logging()

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    scheduler_service.start()
    r = redis.from_url(settings.REDIS_URL, encoding="utf-8", decode_responses=True)
    await FastAPILimiter.init(r)
    
    yield

    scheduler_service.scheduler.shutdown()

    await r.close()

app = FastAPI(
    title="TuneWave",
    description="""
    üéµ **TuneWave** - –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –º—É–∑—ã–∫–∞–ª—å–Ω–∞—è –≤—Å–µ–ª–µ–Ω–Ω–∞—è
    
    ‚ú® **–ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
    - üéß –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫-–∫–æ–ª–ª–µ–∫—Ü–∏–µ–π
    - üìÅ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ —Å –¥—É—à–æ–π
    - üîó –õ–µ–≥–∫–∏–π –æ–±–º–µ–Ω –º—É–∑—ã–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏
    - üåê –î–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–π –º—É–∑—ã–∫–µ –∏–∑ –ª—é–±–æ–π —Ç–æ—á–∫–∏ –º–∏—Ä–∞
    
    üöÄ –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –º—É–∑—ã–∫–æ–π!
    """,
    version="1.0.0",
    contact={
        "name": "Egor",
        "url": "https://github.com/Lalka12235",
    },
    license_info={
        "name": "MIT",
    },
    openapi_tags=[{
        "name": "music",
        "description": "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –º—É–∑—ã–∫–∞–ª—å–Ω—ã–º–∏ —Ç—Ä–µ–∫–∞–º–∏"
    }],
    lifespan=lifespan
)

scheduler_service = SchedulerService()
app.add_middleware(ProxyHeadersMiddleware)



@app.get('/ping')
async def ping():
    return 'Server is running'


#origins = [
#    "http://localhost",  
#    "http://localhost:8080",
#    "http://127.0.0.1:5500",#test
#]

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  
    allow_credentials=True,
    allow_methods=["*"], 
    allow_headers=["*"],  
)

app.add_middleware(LogMiddleware)

for route in V1_ROUTERS:
    app.include_router(route)

os.makedirs(settings.AVATARS_STORAGE_DIR,exist_ok=True)
app.mount("/avatars", StaticFiles(directory=settings.AVATARS_STORAGE_DIR), name="avatars")